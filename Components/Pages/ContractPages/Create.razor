@page "/create"
@using Microsoft.EntityFrameworkCore
@using BlazorAppAttempt.Models
@using System.Globalization
@inject IDbContextFactory<BlazorAppAttempt.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>New Contract</PageTitle>

<div class="container mt-4">
    <h1 class="text-center">Add a Contract</h1>
    <hr />

    @if (showWarning)
    {
        <WarningModal Title="Warning" Message="There are errors in the form." OnClose="CloseWarning" />

    }

    <EditForm method="post" Model="Contract" OnValidSubmit="AddContract" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <div class="row">
            <div class="col-md-6">
                <!-- Dropdown for Project selection -->
                <div class="mb-3">
                    <label for="projectDropdown" class="form-label">Select Project:</label>
                    <InputSelect id="projectDropdown" @bind-Value="Contract.ProjectID" class="form-control" required>
                        <option value=0>-- Select a Project --</option>
                        @foreach (var project in Projects)
                        {
                            <option value="@project.ProjectID">@project.ProjectName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Contract.ProjectID" class="text-danger" />
                    <button type="button" class="btn btn-link" @onclick="ShowNewProjectForm">Create New Project</button>
                </div>

                <!-- New Project Form -->
                @if (showNewProjectForm)
                {
                    <div class="mb-3">
                        <label for="newProjectName" class="form-label">New Project Name:</label>
                        <InputText id="newProjectName" @bind-Value="newProjectName" class="form-control" required />
                        <ValidationMessage For="() => newProjectName" class="text-danger" />
                        <button type="button" class="btn btn-primary" @onclick="CreateProject">Add Project</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelNewProject">Cancel</button>
                    </div>
                }

                <!-- Dropdown for Subcontractor selection -->
                <div class="mb-3">
                    <label for="subcontractorDropdown" class="form-label">Select Subcontractor:</label>
                    <InputSelect id="subcontractorDropdown" @bind-Value="Contract.SubcontractorID" class="form-control" required>
                        <option value=0>-- Select a Subcontractor --</option>
                        @foreach (var subcontractor in Subcontractors)
                        {
                            <option value="@subcontractor.SubcontractorID">@subcontractor.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Contract.SubcontractorID" class="text-danger" />
                    <button type="button" class="btn btn-link" @onclick="ShowNewSubcontractorForm">Create New Subcontractor</button>
                </div>

                <!-- New Subcontractor Form -->
                @if (showNewSubcontractorForm)
                {
                    <div class="mb-3">
                        <label for="newSubcontractorName" class="form-label">New Subcontractor Name:</label>
                        <InputText id="newSubcontractorName" @bind-Value="newSubcontractorName" class="form-control" required />
                        <ValidationMessage For="() => newSubcontractorName" class="text-danger" />

                        <label for="newSubcontractorContact" class="form-label">Contact Info (8 digits):</label>
                        <InputNumber id="newSubcontractorContact" @bind-Value="newSubcontractorContact" class="form-control" required min="10000000" max="99999999" />
                        <ValidationMessage For="() => newSubcontractorContact" class="text-danger" />

                        <button type="button" class="btn btn-primary" @onclick="CreateSubcontractor">Add Subcontractor</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelNewSubcontractor">Cancel</button>
                    </div>
                }

                <div class="mb-3">
                    <label for="startdate" class="form-label">Start Date:</label>
                    <InputDate id="startdate" @bind-Value="Contract.StartDate" class="form-control" required />
                    <ValidationMessage For="() => Contract.StartDate" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="othercontractdetails" class="form-label">Other Contract Details:</label>
                    <InputText id="othercontractdetails" placeholder="Installation of..." @bind-Value="Contract.OtherContractDetails" class="form-control" />
                    <ValidationMessage For="() => Contract.OtherContractDetails" class="text-danger" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="mb-3">
                    <label for="contractamount" class="form-label">Contract Amount (₡):</label>
                    <InputNumber id="contractamount" @bind-Value="Contract.Amount" class="form-control" required />
                    <ValidationMessage For="() => Contract.Amount" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="contractAmountUSD" class="form-label">Contract Amount ($):</label>
                    <input type="number" id="contractAmountUSD" class="form-control" value="@ContractAmountUSDString" step="0.01" readonly required style="background-color: #e9ecef;" />
                </div>
                <hr />
                <div class="progress-section">
                    <h4>Work Aspects</h4>
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th style="width: 200px;">Name</th>
                                <th>Weight</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var aspect in workAspects)
                            {
                                <tr>
                                    <td>
                                        <input type="text" class="form-control" placeholder="Floors, Windows..." @bind="aspect.Name" required />
                                    </td>
                                    <td>
                                        <input type="number" class="form-control" @bind="aspect.Weight" step="0.1" min="0" max="100" required />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" @onclick="() => RemoveWorkAspect(aspect)">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="text-danger" style="display: @(totalWeight != 100 ? "block" : "none")">
                        The total weight of all work aspects must equal 100.
                    </div>
                    <button type="button" class="btn btn-secondary" @onclick="AddWorkAspect">Add Work Aspect</button>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary mt-3">Create</button>
    </EditForm>
</div>

@code {
    private Contract Contract { get; set; } = new Contract
        {
            Subcontractor = new Subcontractor { Name = "Default Subcontractor" }, // Provide defaults
            Project = new Project { ProjectName = "Default Project" }, // Provide defaults
            StartDate = DateTime.Today, // Set default
            EndDate = DateTime.Today.AddYears(1) // Set default
        };

    private bool showNewProjectForm = false;
    private string newProjectName;
    private bool showNewSubcontractorForm = false;
    private string newSubcontractorName;
    private int newSubcontractorContact; // 8-digit contact number
    private bool showWarning = false;

    private List<Project> Projects { get; set; } = new();
    private List<Subcontractor> Subcontractors { get; set; } = new();
    private List<WorkAspect> workAspects { get; set; } = new();
    private List<Revision> revisions { get; set; } = new();
    private List<Transaction> transactions { get; set; } = new();

    private decimal ContractAmountUSD => Contract.Amount / 520;
    private string ContractAmountUSDString => ContractAmountUSD.ToString("F2");
    private decimal totalWeight => workAspects.Sum(wa => wa.Weight);

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Projects = await context.Projects.ToListAsync();
        Subcontractors = await context.Subcontractors.ToListAsync();
        Contract.ProjectID = 0;
        Contract.SubcontractorID = 0;
    }

    private async Task AddContract()
    {
        if (workAspects.Count == 0 || Contract.ProjectID == 0 || Contract.SubcontractorID == 0
        || Contract.Amount <= 0 || totalWeight != 100)
        {
            ShowWarning();
        }

        else
        {
            using var context = DbFactory.CreateDbContext();
            Contract.DueBalance = Contract.Amount;
            Contract.Progress = 0;
            Contract.TotalPaid = 0;
            Contract.Subcontractor = await context.Subcontractors.FindAsync(Contract.SubcontractorID);
            Contract.Project = await context.Projects.FindAsync(Contract.ProjectID);
            Contract.WorkAspects = workAspects;
            Contract.Transactions = transactions;
            Contract.Revisions = revisions;
            context.Contracts.Add(Contract);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/contracts");
        } 
    }

    private void AddWorkAspect()
    {
        var newAspect = new WorkAspect
            {
                Name = "",
                ContractID = Contract.ContractID,
                Weight = 0,
                Progress = 0,
                Contract = Contract // Set the required property
            };
        workAspects.Add(newAspect);
        StateHasChanged();
    }

    private void RemoveWorkAspect(WorkAspect aspect)
    {
        workAspects.Remove(aspect);
        StateHasChanged();
    }

    private void ShowNewProjectForm()
    {
        showNewProjectForm = true;
    }
    private void CancelNewProject()
    {
        showNewProjectForm = false;
        newProjectName = string.Empty; // Reset the new project name
    }

    private async Task CreateProject()
    {
        if (!string.IsNullOrWhiteSpace(newProjectName))
        {
            using var context = DbFactory.CreateDbContext();
            var newProject = new Project { ProjectName = newProjectName };
            context.Projects.Add(newProject);
            await context.SaveChangesAsync();

            // Refresh the project list
            Projects = await FetchProjectsAsync();

            // Select the newly created project
            Contract.ProjectID = newProject.ProjectID;

            // Reset the form
            CancelNewProject();
        }
        else
        {
            ShowWarning();
        }
    }
    private async Task<List<Project>> FetchProjectsAsync()
    {
        using var context = DbFactory.CreateDbContext();
        return await context.Projects.ToListAsync();
    }

    private void ShowNewSubcontractorForm()
    {
        showNewSubcontractorForm = true;
    }

    private void CancelNewSubcontractor()
    {
        showNewSubcontractorForm = false;
        newSubcontractorName = string.Empty;
        newSubcontractorContact = 0; // Reset the contact number
    }

    private async Task CreateSubcontractor()
    {
        if (!string.IsNullOrWhiteSpace(newSubcontractorName) && newSubcontractorContact.ToString().Length == 8)
        {
            using var context = DbFactory.CreateDbContext();
            var newSubcontractor = new Subcontractor { Name = newSubcontractorName, ContactInfo = newSubcontractorContact };
            context.Subcontractors.Add(newSubcontractor);
            await context.SaveChangesAsync();

            Subcontractors = await FetchSubcontractorsAsync();
            Contract.SubcontractorID = newSubcontractor.SubcontractorID;

            CancelNewSubcontractor();
        }
        else
        {
            ShowWarning();
        }
    }

    private async Task<List<Subcontractor>> FetchSubcontractorsAsync()
    {
        using var context = DbFactory.CreateDbContext();
        return await context.Subcontractors.ToListAsync();
    }

    private void ShowWarning()
    {
        showWarning = true;
    }

    private void CloseWarning()
    {
        showWarning = false;
    }
}

<style>
    .modal {
        display: block;
        background: rgba(0, 0, 0, 0.5);
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }

    .container {
        max-width: 900px;
    }

    .form-label {
        font-weight: bold;
    }

    .btn-link {
        padding: 0;
        font-size: 0.9rem;
    }

    .progress-section {
        margin-top: 20px;
    }

    .table {
        background-color: white;
        border-radius: 5px;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
    }

        .table th, .table td {
            text-align: center;
        }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .btn {
        font-size: 16px;
        padding: 10px 15px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-primary:hover, .btn-secondary:hover, .btn-danger:hover {
            opacity: 0.8;
        }

    .text-center {
        text-align: center;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .mt-4 {
        margin-top: 1.5rem;
    }
</style>
