@page "/contracts/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorAppAttempt.Models
@inject IDbContextFactory<BlazorAppAttempt.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h2>Contract</h2>
    <hr />
    @if (contract is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ProjectID</dt>
            <dd class="col-sm-10">@contract.ProjectID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SubcontractorID</dt>
            <dd class="col-sm-10">@contract.SubcontractorID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ContractAmount</dt>
            <dd class="col-sm-10">@contract.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DueBalance</dt>
            <dd class="col-sm-10">@contract.DueBalance</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Progress</dt>
            <dd class="col-sm-10">@contract.Progress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@contract.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OtherContractDetails</dt>
            <dd class="col-sm-10">@contract.OtherContractDetails</dd>
        </dl>
        <EditForm method="post" Model="contract" OnValidSubmit="DeleteContract" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(contract is null)">Delete</button> |
            <a href="/contracts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Contract? contract;

    [SupplyParameterFromQuery]
    private int ContractID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        contract = await context.Contracts.FirstOrDefaultAsync(m => m.ContractID == ContractID);

        if (contract is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteContract()
    {
        using var context = DbFactory.CreateDbContext();
        context.Contracts.Remove(contract!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/contracts");
    }
}
