@page "/contracts/details"
@using Microsoft.EntityFrameworkCore
@using BlazorAppAttempt.Models
@inject IDbContextFactory<BlazorAppAttempt.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@using System.Globalization;

<PageTitle>Details</PageTitle>

<div class="container mt-4">
    <h1 class="text-center">Contract Details</h1>
    <hr />
    @if (contract is null)
    {
        <p class="loading-text"><em>Loading...</em></p>
    }
    else
    {
        <div class="contract-header">
            <h4>@contract.Subcontractor?.Name</h4>
            <p><strong>Contract Amount:</strong> @contract.Amount.ToString("C", crCulture) (@ContractAmountUSDString)</p>
            <p><strong>Contract Details:</strong> @contract.OtherContractDetails</p>
            <p><strong>Project:</strong> @contract.Project?.ProjectName</p>
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width:@contract.Progress%" aria-valuenow="@contract.Progress" aria-valuemin="0" aria-valuemax="100">@contract.Progress%</div>
            </div>
            <p><strong>Due Balance:</strong> @contract.DueBalance.ToString("C", crCulture)</p>
        </div>

        <div class="progress-section">
            <h4>Work Aspects</h4>
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Work Aspect</th>
                        <th>Weight</th>
                        <th style="width: 450px;">Current Progress</th>
                    </tr>
                </thead>
                <tbody>
                    @if (contract.WorkAspects != null && contract.WorkAspects.Any())
                    {
                        @foreach (var tracking in contract.WorkAspects)
                        {
                            <tr>
                                <td>@tracking.Name</td>
                                <td>@tracking.Weight%</td>
                                <td>
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width:@tracking.Progress%" aria-valuenow="@tracking.Progress" aria-valuemin="0" aria-valuemax="100">@tracking.Progress%</div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" class="text-center text-muted">No work aspects available.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="revisions-section">
            <hr />
            <h4>Revisions</h4>

            <!-- List of Revisions -->
            @if (RevisionsList.Count == 0)
            {
                <p class="text-center text-muted">No revisions found.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Revision Number</th>
                            <th>Date Created</th>
                            <th>Remarks</th>
                            <th>Amount Due</th> <!-- New column for Amount Due -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var revision in RevisionsList)
                        {
                            <tr>
                                <td>@revision.RevisionNumber</td>
                                <td>@revision.DateCreated.ToShortDateString()</td>
                                <td>@revision.Remarks</td>
                                <td>@revision.AmountDue.ToString("C", crCulture)</td> <!-- Display Amount Due -->
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <div class="text-right mt-2">
                <button class="btn btn-primary" @onclick="() => OnDetailsClick(ContractID)">View Revisions</button>
            </div>
        </div>

        <div class="transaction-section">
            <hr />
            <h4>Transactions</h4>
            <div class="col-md-6">
                <h3>Transactions</h3>
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Description</th>
                            <th>Date Created</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Transactions)
                        {
                            <tr>
                                <td>@transaction.Type</td>
                                <td>@transaction.Amount.ToString("C", crCulture)</td>
                                <td>@transaction.Description</td>
                                <td>@transaction.DateCreated.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="col-md-6">
                    <h3>Add Transaction</h3>
                    <EditForm Model="NewTransaction" OnValidSubmit="AddTransaction">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount:</label>
                            <InputNumber id="amount" @bind-Value="NewTransaction.Amount" class="form-control" />
                            <ValidationMessage For="() => NewTransaction.Amount" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description:</label>
                            <InputText id="description" @bind-Value="NewTransaction.Description" class="form-control" />
                            <ValidationMessage For="() => NewTransaction.Description" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="type" class="form-label">Type:</label>
                            <InputSelect id="type" @bind-Value="NewTransaction.Type" class="form-control">
                                <option value="Credit">Credit</option>
                                <option value="Debit">Debit</option>
                            </InputSelect>
                            <ValidationMessage For="() => NewTransaction.Type" class="text-danger" />
                        </div>
                        <button type="submit" class="btn btn-primary">Add Transaction</button>
                    </EditForm>
                </div>

            </div>


        </div>

        <div class="summary-section">
            <hr />
            <h4>Summary</h4>
            <p><strong>Total Paid:</strong> @TotalPaid.ToString("C", crCulture)</p>
            <p><strong>Amount Due:</strong> @contract?.DueBalance.ToString("C", crCulture)</p>
        </div>

        <div class="text-right mt-2">
            <button class="btn btn-danger" @onclick="() => OnDeleteClick(ContractID)">Delete Contract</button>
        </div>
        <hr />
    }
</div>

@code {
    private Contract? contract;
    private string textareaValue = string.Empty;

    private decimal ContractAmountUSD => contract.Amount / 520;
    private string ContractAmountUSDString => ContractAmountUSD.ToString("C");
    private decimal TotalPaid = 0;

    private List<Transaction> Transactions { get; set; } = new();
    private Transaction NewTransaction { get; set; } = new();

    CultureInfo crCulture = new CultureInfo("es-CR"); // Costa Rica culture

    [SupplyParameterFromQuery]
    private int ContractID { get; set; }

    private List<Revision> RevisionsList => contract?.Revisions.ToList() ?? new List<Revision>();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        contract = await context.Contracts
            .Include(c => c.Project)
            .Include(c => c.Subcontractor)
            .Include(c => c.WorkAspects)
            .Include(c => c.Revisions)
            .ThenInclude(r => r.Changes)
            .FirstOrDefaultAsync(m => m.ContractID == ContractID);

        if (contract is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            Console.WriteLine($"Contract loaded: {contract.Amount}, Subcontractor: {contract.Subcontractor?.Name}, Project: {contract.Project?.ProjectName}");
            TotalPaid = contract.Amount - contract.DueBalance;
        }
        
    }

    private void OnDetailsClick(int contractID)
    {
        NavigationManager.NavigateTo($"/revisions?contractid={contractID}");
    }

    private void OnDeleteClick(int contractID)
    {
        NavigationManager.NavigateTo($"/contracts/delete?contractid={contractID}");
    }

    private void AddTransaction()
    {
        using var context = DbFactory.CreateDbContext();
        NewTransaction.DateCreated = DateTime.Now;
        context.Transactions.Add(NewTransaction);
        context.SaveChanges();
        LoadTransactions();
    }

    private void LoadTransactions()
    {
        using var context = DbFactory.CreateDbContext();
        Transactions = context.Transactions
            .Where(t => t.ContractID == ContractID)
            .ToList();
    }
}

<style>
    .contract-header {
        background-color: #f5f5f5;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    .progress-bar {
        background-color: #4caf50;
    }

    .progress {
        margin-bottom: 15px; /* Adjust the value as needed */
    }

    .table {
        background-color: white;
        border-radius: 5px;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
    }

        .table th, .table td {
            text-align: center;
        }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .btn {
        font-size: 16px;
        padding: 10px 15px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-primary:hover, .btn-danger:hover {
            opacity: 0.8;
        }

    .loading-text {
        color: #999;
        font-style: italic;
        text-align: center;
        margin: 20px 0;
    }

    .summary-section, .revisions-section {
        margin-top: 20px;
    }

    .text-right {
        text-align: right;
    }
</style>
