@using System.Globalization;
@using Microsoft.EntityFrameworkCore;
@using BlazorAppAttempt.Models;
@inject IDbContextFactory<BlazorAppAttempt.Data.ApplicationDbContext> DbFactory;
@inject NavigationManager NavigationManager;

@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorAppAttempt.Data

<div class="transaction-section container">
    <hr />
    <h4>Debits & Credits</h4>
    <div class="row">
        <div class="col-md-8">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Type</th>
                        <th>Amount</th>
                        <th>Description</th>
                        <th>Date Created</th>
                        <th>Created By</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in transactions)
                    {
                        <tr>
                            <td>@transaction.Type</td>
                            <td>@transaction.Amount.ToString("C", crCulture)</td>
                            <td>@transaction.Description</td>
                            <td>@transaction.DateCreated.ToShortDateString()</td>
                            <td>@transaction.CreatedBy</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction.TransactionID)">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="col-md-4">
            <button type="button" class="btn btn-link" @onclick="ShowNewTransactionForm">Add New Transaction</button>

            @if (showNewTransactionForm)
            {
                <div class="card p-3 mt-3">
                    <h5 class="card-title">Add Transaction</h5>
                    <EditForm Model="NewTransaction" OnValidSubmit="AddTransaction">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount:</label>
                            <InputNumber id="amount" @bind-Value="NewTransaction.Amount" class="form-control" />
                            <ValidationMessage For="() => NewTransaction.Amount" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description:</label>
                            <InputText id="description" @bind-Value="NewTransaction.Description" class="form-control" placeholder="Advanced payment..."/>
                            <ValidationMessage For="() => NewTransaction.Description" class="text-danger" />
                        </div>
                        <div class="mb-3">
                            <label for="type" class="form-label">Type:</label>
                            <InputSelect id="type" @bind-Value="NewTransaction.Type" class="form-control">
                                <option value="Credit">Credit</option>
                                <option value="Debit">Debit</option>
                            </InputSelect>
                            <ValidationMessage For="() => NewTransaction.Type" class="text-danger" />
                        </div>
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary">Add Transaction</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelNewTransaction">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int ContractID { get; set; }

    private List<Transaction> transactions { get; set; } = new();
    private Transaction NewTransaction { get; set; } = new();
    CultureInfo crCulture = new CultureInfo("es-CR"); // Costa Rica culture
    private bool showNewTransactionForm = false;

    private string? username;

    private Contract contract;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        username = user?.UserName;
        LoadContract();
        LoadTransactions();
    }

    private void LoadContract()
    {
        using var context = DbFactory.CreateDbContext();
        contract = context.Contracts
            .Include(c => c.Transactions)
            .FirstOrDefault(c => c.ContractID == ContractID);
    }

    private void ShowNewTransactionForm()
    {
        showNewTransactionForm = !showNewTransactionForm;
    }

    private void CancelNewTransaction()
    {
        showNewTransactionForm = false;
        NewTransaction.Description = string.Empty;
        NewTransaction.Amount = 0;
    }

    private void AddTransaction()
    {
        if (NewTransaction.Description == null)
        {
            return;
        }
        using var context = DbFactory.CreateDbContext();
        NewTransaction.TransactionID = 0;
        NewTransaction.DateCreated = DateTime.Now;
        NewTransaction.ContractID = ContractID;
        NewTransaction.CreatedBy = username;

        if (NewTransaction.Type == TransactionType.Debit)
        {
            NewTransaction.Amount = -NewTransaction.Amount;
        }

        contract.Transactions.Add(NewTransaction);
        context.Contracts.Update(contract);
        context.SaveChanges();

        transactions.Add(NewTransaction); // Update the local list
        NewTransaction = new Transaction(); // Reset the form
        showNewTransactionForm = false; // Hide the form
        StateHasChanged(); // Trigger UI update
    }

    private void DeleteTransaction(int transactionId)
    {
        using var context = DbFactory.CreateDbContext();
        var transaction = context.Transactions.FirstOrDefault(t => t.TransactionID == transactionId);
        if (transaction != null)
        {
            contract.Transactions.Remove(transaction);
            context.Transactions.Remove(transaction);
            context.SaveChanges();

            // Update the local list
            var transactionToRemove = transactions.FirstOrDefault(t => t.TransactionID == transactionId);
            if (transactionToRemove != null)
            {
                transactions.Remove(transactionToRemove);
            }
            StateHasChanged(); // Trigger UI update
        }
    }

    private void LoadTransactions()
    {
        using var context = DbFactory.CreateDbContext();
        transactions = context.Transactions
            .Where(t => t.ContractID == ContractID)
            .ToList();
    }
}

<style>

    .transaction-section h4 {
        margin-bottom: 20px;
    }

    .transaction-section .btn-danger {
        display: inline-flex;
        align-items: center;
    }

    .transaction-section .card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }


</style>